from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from datetime import datetime

###############################################################################
# CONSTANTS

SEASON_YEAR_START=2024
SEASON_YEAR_END=2025

BLUE = '\033[34m'
GREEN = '\033[92m'
RED = '\033[91m'
RESET = '\033[0m'

PREFIX = BLUE + f'[scrape-games]: ' + RESET
TIMEOUT = 10

# xpath: div that encapsulates every week schedule
SCHEDULE_PARENT_DIV_XPATH = '/html/body/div[1]/div[2]/div[2]/main/div[2]/section/div/div[3]'

# xpath: button to show more weeks
LOAD_MORE_BUTTON_XPATH = '/html/body/div[1]/div[2]/div[2]/main/div[2]/div/button'

###############################################################################
# PRINT MESSAGES

def log(msg):
	print(PREFIX + msg)

def success(msg):
	print(PREFIX + GREEN + msg + RESET)

def fail(msg):
	print(PREFIX + RED + msg + RESET)

###############################################################################
# LOAD BUTTON

def keep_loading_more(DRIVER: webdriver):
	# define timeout obj
	wait = WebDriverWait(DRIVER, TIMEOUT)

	# get "Load More button"
	try:
		log('Waiting for "Load More" button to become visible')
		load_more_button = wait.until(EC.element_to_be_clickable((By.XPATH, LOAD_MORE_BUTTON_XPATH)))
	except Exception as err:
		fail(f'Error: Could not find "Load More" button\n{err}')
		exit(-1)

	# scroll into "Load More" button view
	try: 
		log('Scrolling into button view')
		DRIVER.execute_script("arguments[0].scrollIntoView();", load_more_button)
	except Exception as err:
		fail(f'Error: Could not scroll into button view\n{err}')
		exit(-1)

	# keep clicking "Load More" until exhausted
	try:
		while load_more_button != None:
			log('Clicking "Load More" button')
			load_more_button.click()
	except:
		log('"Load More" button click exhausted')

###############################################################################
# PARSE FUNC

def parse_schedule_weeks(DRIVER: webdriver) -> list[dict]:
	game_days: list[dict] = []

	parent_elem = DRIVER.find_element(By.CLASS_NAME, "Block_blockContent__6iJ_n")
	parent_elem = parent_elem.find_elements(By.XPATH, "./*")[2]
	weeks = parent_elem.find_elements(By.XPATH, "./*")

	log("Getting weeks:")
	for wk_num, week in enumerate(weeks):
		log(f"  Week: {wk_num+1}")
		# ignore "ScheduleWeek_swHeader_..." header elem
		days = week.find_elements(By.XPATH, "./*")[1:]

		log("\n  Getting days:")
		for day in days:
			day_children_elems = day.find_elements(By.XPATH, "./*")
			# process date
			date_elem = day_children_elems[0]
			date_raw = date_elem.find_element(By.CLASS_NAME, "ScheduleDay_sdDay__3s2Xt").text

			games = day_children_elems[1].find_elements(By.XPATH, "./*")
			log(f"    Date: {date_raw} ({len(games)} games)")

			day_of_week = date_raw.split(',')[0]

			game_day: dict = {}
			game_day["day"] = day_of_week.capitalize()
			game_day["date"] = convert_nba_date(date_raw)
			game_day["games"] = []

			# process games
			for game_num, game in enumerate(games):

				# access "content" div
				content = game.find_elements(By.XPATH, "./*")[0]
				status, matchup = content.find_elements(By.XPATH, "./*")

				# access status: time + broadcast info
				status_child_elems = status.find_elements(By.XPATH, "./*")

				time = ""
				broadcasters_img_src = ""
				away_team_id = ""
				home_team_id = ""

				# regular game
				if len(status_child_elems) == 2:
					time_elem, broadcasters_base = status_child_elems

					time = time_elem.text

					# broadcasters_sec = broadcasters_base.find_elements(By.CLASS_NAME, "Broadcasters_section__ISlyP")[0]
					# broadcasters_img = broadcasters_sec.find_element(By.CLASS_NAME, "Broadcasters_icon__82MTV")

					# access matchup: away vs home
					teams = matchup.find_elements(By.TAG_NAME, "div")
					
					away_team_href = teams[0].find_element(By.TAG_NAME, "a").get_attribute('href')
					home_team_href = teams[1].find_element(By.TAG_NAME, "a").get_attribute('href')

					away_team_id = away_team_href.rstrip('/').split('/')[-2]
					home_team_id = home_team_href.rstrip('/').split('/')[-2]

				# tbd
				elif status_child_elems[0].text == "TBD":
					time = "TBD"
					away_team_id = ""
					home_team_id = ""

				success(f"      Game ({game_num+1}/{len(games)}): {day_of_week, time, away_team_id, home_team_id}")

				game_day["games"].append({
					"awayTeamNbaId": away_team_id,
					"homeTeamNbaId": home_team_id,
					"time": time,
				})
			
			game_days.append(game_day)

	return game_days

###############################################################################
# HELPER FUNCS

# !generated by ChatGPT
def convert_nba_date(date_str: str) -> str:
    # Define the date format
    date_format = "%A, %B %d"  # "Tuesday, October 22"
    
    # Parse the date
    parsed_date = datetime.strptime(date_str, date_format)
    
    # Check the month and adjust the year based on your rule
    if parsed_date.month >= 10:  # October, November, December
        parsed_date = parsed_date.replace(year=SEASON_YEAR_START)
    else:
        parsed_date = parsed_date.replace(year=SEASON_YEAR_END)

    return parsed_date.isoformat()  # Return as string in ISO format